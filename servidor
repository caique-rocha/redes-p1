#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re

apelidos = {}
canais = {}


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')

    if hasattr(conexao, 'apelido') and conexao.apelido in apelidos:
        apelido = conexao.apelido
        del apelidos[apelido]

        canais_comum = set()
        for canal, membros in canais.items():
            if apelido in membros:
                canais_comum.add(canal)

        for canal in canais_comum:
            for membro in canais[canal].values():
                if membro != conexao:  # Não envia para o próprio usuário que está saindo
                    membro.enviar(b':' + apelido + b' QUIT :Connection closed\r\n')

            del canais[canal][apelido]  # Remove o usuário dos canais

            # Remove o canal se ele ficar vazio
            if not canais[canal]:
                del canais[canal]

    conexao.fechar()


def dados_recebidos(conexao, dados):
    if dados == b'':
        return sair(conexao)

    conexao.dados_residuais += dados

    while b'\r\n' in conexao.dados_residuais:
        linha, conexao.dados_residuais = conexao.dados_residuais.split(b'\r\n', 1)
        comando, *args = linha.split(b' ', 1)

        if not args:
            return

        if comando == b'PING':
            conexao.enviar(b':server PONG server :' + (args[0] if args else b'') + b'\r\n')

        elif comando == b'NICK':
            novo_apelido = args[0].strip().lower()

            if not validar_nome(novo_apelido):
                conexao.enviar(b':server 432 * ' + novo_apelido + b' :Erroneous nickname\r\n')
            elif novo_apelido.lower() in apelidos and apelidos[novo_apelido.lower()] != conexao:
                if hasattr(conexao, 'apelido'):
                    conexao.enviar(
                        b':server 433 ' + conexao.apelido + b' ' + args[
                            0].strip() + b' :Nickname is already in use\r\n')
                else:
                    conexao.enviar(b':server 433 * ' + args[0].strip() + b' :Nickname is already in use\r\n')
            else:
                if hasattr(conexao, 'apelido'):
                    apelido_antigo = conexao.apelido
                    del apelidos[apelido_antigo]
                    conexao.enviar(b':' + apelido_antigo + b' NICK ' + novo_apelido + b'\r\n')
                else:
                    conexao.enviar(b':server 001 ' + novo_apelido + b' :Welcome\r\n')
                    conexao.enviar(b':server 422 ' + novo_apelido + b' :MOTD File is missing\r\n')

                conexao.apelido = novo_apelido
                apelidos[novo_apelido] = conexao

        elif comando == b'PRIVMSG':

            destinatario, mensagem = args[0].split(b' :', 1)
            destinatario = destinatario.strip().lower()

            if destinatario in apelidos:  # Mensagem para um usuário
                conexao_destino = apelidos[destinatario]
                conexao_destino.enviar(
                    b':' + conexao.apelido + b' PRIVMSG ' + destinatario + b' :' + mensagem + b'\r\n')

            elif destinatario in canais:  # Mensagem para um canal
                for membro in canais[destinatario].values():
                    if membro != conexao:
                        membro.enviar(b':' + conexao.apelido + b' PRIVMSG ' + destinatario + b' :' + mensagem + b'\r\n')

        elif comando == b'JOIN':

            nome_canal = args[0].strip().lower()

            if not validar_nome(nome_canal[1:]):
                conexao.enviar(b':server 403 ' + nome_canal + b' :No such channel\r\n')
            elif nome_canal not in canais:
                canais[nome_canal] = {conexao.apelido: conexao}

            canais[nome_canal][conexao.apelido] = conexao

            # Envia a mensagem de entrada para o usuário e para os membros do canal
            for membro in canais[nome_canal].values():
                membro.enviar(b':' + conexao.apelido + b' JOIN :' + nome_canal + b'\r\n')

            # Ordena a lista de membros do canal
            membros_ordenados = sorted(canais[nome_canal].keys())

            # Envia a lista de membros para o usuário que entrou
            conexao.enviar(b':server 353 ' + conexao.apelido + b' = ' + nome_canal + b' :' + b' '.join(
                membros_ordenados) + b'\r\n')
            conexao.enviar(b':server 366 ' + conexao.apelido + b' ' + nome_canal + b' :End of /NAMES list.\r\n')

        elif comando == b'PART':

            nome_canal = args[0].split(b' ')[0]
            if nome_canal not in canais or conexao.apelido not in canais[nome_canal]:
                # Ignora o comando se o canal não existir ou se o usuário não estiver no canal
                return

            # Envia a mensagem de saída para todos os membros do canal
            for membro in canais[nome_canal].values():
                membro.enviar(b':%s PART %s\r\n' % (conexao.apelido, nome_canal))

            # Remove o usuário do canal
            del canais[nome_canal][conexao.apelido]

            # Remove o canal se ele ficar vazio
            if len(canais[nome_canal]) == 0:
                del canais[nome_canal]

    print(conexao, dados)


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
